
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #All the 8 simulation settings in the article are provided below.
> 
> #path <- "/Users/jingoy/Dropbox/modify_dif_code/J15 final"
> #setwd(path)
> source("benchmark_functions.R")
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

Loading required package: stats4
Loading required package: lattice
> 
> #N=1000, p=5, small DIF
> args <- commandArgs(TRUE)
> seed=as.numeric(args[[1]])
> rho=as.numeric(args[[2]])
> N=as.numeric(args[[3]])
> J=as.numeric(args[[4]])
> p=as.numeric(args[[5]])
> set.seed(seed)
> 
> a=rep(c(1, 1.2, 1.4,1.6,1.8), J/5)
> b=rep(c(0.8, 0.2, -0.4, -1, 1), J/5)
> 
> opt_d = rep(0, J)
> a=rep(c(1, 1.2, 1.4,1.6,1.8), J/5)
> b=rep(c(0.8, 0.2, -0.4, -1, 1), J/5)
> 
> g=matrix(0, J, p)
> 
> set.seed(5)
> for(j in 1:J){
+   inx = sample(1:p, p/2-1, replace=FALSE)
+   g[j, inx] = runif(p/2-1, rho-1, rho+1)
+ }
> 
> nonzero_list = apply(g!=0, 2, sum)
> exceeding_cols = which(nonzero_list - ceiling(J/2) + 1 >= 0)
> rep_times = nonzero_list[exceeding_cols] - ceiling(J/2) + 1
> additional_cols = rep(exceeding_cols, rep_times)
> 
> for(c in additional_cols){
+   nonzero_rows = which(g[, c]!=0)
+   g[sample(nonzero_rows, 1), c] =0
+ }
> 
> x=matrix(0, nrow = N, ncol=p)
> size = N/p
> for(j in 1:p){
+   x[((j-1)*size+1):(j*size),j] = 1
+ }
> 
> 
> mu.vec=rep(c( 0.06, -0.06, -0.08, -0.1, -0.12, -0.2, -0.22, -0.24, -0.26, -0.28), p/10)
> mu.vec = (mu.vec - mean(mu.vec))
> 
> sigma.vec=rep(c(0.8, 0.4, 0.5, 0.6, 0.7, 0.75, 0.8, 0.85, 0.9, 1.1), p/10)
> 
> r=coverage_proposed_inference(seed=seed, N, sig=0.05, gamma=g, beta.vec=b, alpha.vec=a, mu=mu.vec, sigma=sigma.vec, x=x, ite=1, sig_list=seq(0, 1, 0.02))
[1] 1
[1] 174074.3
[1] 173812.4
[1] 173750.8
[1] 173727.5
[1] 2
[1] 174291.3
[1] 174006.3
[1] 173936.6
[1] 173910.5
[1] 3
[1] 173928.8
[1] 173639.9
[1] 173568.9
[1] 173541.6
[1] 4
[1] 174287.3
[1] 174014
[1] 173951.4
[1] 173928
[1] 5
[1] 174474.7
[1] 174167.3
[1] 174089.2
[1] 174059.2
[1] 6
[1] 174302.2
[1] 174026.6
[1] 173959.6
[1] 173934.5
[1] 7
[1] 174027
[1] 173741.7
[1] 173674.6
[1] 173649.4
[1] 8
[1] 174934.5
[1] 174676.9
[1] 174615
[1] 174591.2
[1] 9
[1] 173637.9
[1] 173349
[1] 173280.3
[1] 173254.7
[1] 10
[1] 174227.9
[1] 173939.8
[1] 173871.7
[1] 173846.3
> 
> 
> cor_all = c()
> for(i in 1:dim(r$mu)[1]){
+   cor_all = c(cor_all, cor(as.numeric(r$mu[i,]), mu.vec, method = "kendall")
+   )
+ }
> 
> #write.table(g, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_true_g_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(cor_all, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_cor_all_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> 
> 
> write.table(r$alpha, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_alpha_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(r$beta, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_beta_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> #write.table(r$gamma, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_gamma_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(r$mu, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_mu_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(r$sigma, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_sigma_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> 
> #write.table(r$g_MSE, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_g_MSE_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(r$a_MSE, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_a_MSE_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(r$b_MSE, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_b_MSE_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(r$mu_MSE, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_mu_MSE_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> write.table(r$sigma_MSE, sep=",",  col.names=FALSE, row.names=FALSE, file = paste0('seed',seed,'_sigma_MSE_N', N,'_rho',rho,'_J',J,'_p',p,'.csv'))
> 
> 
> 
> proc.time()
    user   system  elapsed 
2415.583   13.557 2439.568 
